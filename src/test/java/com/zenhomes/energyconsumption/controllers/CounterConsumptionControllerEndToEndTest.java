package com.zenhomes.energyconsumption.controllers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.zenhomes.energyconsumption.models.CounterConsumption;
import com.zenhomes.energyconsumption.repositories.AbstractRepositoryTest;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;

import java.io.IOException;
import java.nio.file.Files;

import static org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class CounterConsumptionControllerEndToEndTest extends AbstractRepositoryTest {

    @LocalServerPort
    private int serverPort;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private TestRestTemplate testRestTemplate;

    @Autowired
    private MongoTemplate mongoTemplate;

    @Test
    void shouldSaveCounterInformation() throws Exception {
        final var createdCounterConsumption = testRestTemplate.postForObject(getBaseUrl() + "counter_callback",
                objectMapper.readTree(readTestResource("counter_callback_request.json")), CounterConsumption.class);

        final var savedCounterConsumption = mongoTemplate.findOne(new Query(), CounterConsumption.class);
        final var expectedCounterConsumption = new CounterConsumption("1", 10000.123);
        assertTrue(reflectionEquals(savedCounterConsumption, expectedCounterConsumption, AUTOGENERATED_FIELDS));
        assertTrue(reflectionEquals(savedCounterConsumption, createdCounterConsumption, AUTOGENERATED_FIELDS));
    }

    private byte[] readTestResource(String resourceLocation) throws IOException {
        return Files.readAllBytes(new ClassPathResource(resourceLocation).getFile().toPath());
    }

    private String getBaseUrl() {
        return "http://localhost:" + serverPort + "/";
    }
}