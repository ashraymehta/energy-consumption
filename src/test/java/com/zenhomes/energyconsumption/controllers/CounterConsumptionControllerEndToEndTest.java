package com.zenhomes.energyconsumption.controllers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.zenhomes.energyconsumption.gateways.CounterGateway;
import com.zenhomes.energyconsumption.models.CounterConsumption;
import com.zenhomes.energyconsumption.models.dto.ConsumptionReportResponse;
import com.zenhomes.energyconsumption.models.dto.Counter;
import com.zenhomes.energyconsumption.models.dto.VillageConsumption;
import com.zenhomes.energyconsumption.models.dto.VillageConsumptions;
import com.zenhomes.energyconsumption.repositories.AbstractRepositoryTest;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;

import static com.zenhomes.energyconsumption.utils.ResourceUtil.readTestResource;
import static org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class CounterConsumptionControllerEndToEndTest extends AbstractRepositoryTest {

    @LocalServerPort
    private int serverPort;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private TestRestTemplate testRestTemplate;

    @Autowired
    private MongoTemplate mongoTemplate;

    @MockBean
    private CounterGateway counterGateway;

    @Test
    void shouldSaveCounterInformation() throws Exception {
        final var createdCounterConsumption = testRestTemplate.postForObject(getBaseUrl() + "counter_callback",
                objectMapper.readTree(readTestResource("counter_callback_request.json")), CounterConsumption.class);

        final var savedCounterConsumption = mongoTemplate.findOne(new Query(), CounterConsumption.class);
        final var expectedCounterConsumption = new CounterConsumption("1", 10000.123);
        assertTrue(reflectionEquals(savedCounterConsumption, expectedCounterConsumption, AUTOGENERATED_FIELDS));
        assertTrue(reflectionEquals(savedCounterConsumption, createdCounterConsumption, AUTOGENERATED_FIELDS));
    }

    @Test
    void shouldGetConsumptionReport() {
//      given
        final var aCounterId = "aCounterId";
        final var anotherCounterId = "anotherCounterId";
        final var yetAnotherCounterId = "yetAnotherCounterId";
        final var oneVillage = "oneVillage";
        final var anotherVillage = "anotherVillage";

        createCounterConsumption(new CounterConsumption(aCounterId, 100.0));
        createCounterConsumption(new CounterConsumption(aCounterId, 200.0));
        createCounterConsumption(new CounterConsumption(anotherCounterId, 400.0));
        createCounterConsumption(new CounterConsumption(yetAnotherCounterId, 500.0));

        when(counterGateway.getCounter(aCounterId)).thenReturn(new Counter(aCounterId, oneVillage));
        when(counterGateway.getCounter(anotherCounterId)).thenReturn(new Counter(anotherCounterId, anotherVillage));
        when(counterGateway.getCounter(yetAnotherCounterId)).thenReturn(new Counter(yetAnotherCounterId, oneVillage));

//      when
        final var consumptionReportResponse = testRestTemplate.getForObject(getBaseUrl() + "consumption_report?duration=24h",
                ObjectNode.class);

//      then
        final var expectedVillageConsumptions = VillageConsumptions.of(
                new VillageConsumption(oneVillage, 800.0),
                new VillageConsumption(anotherVillage, 400.0)
        );
        final var expectedConsumptionReportResponse = objectMapper.valueToTree(
                new ConsumptionReportResponse(expectedVillageConsumptions));
        assertThat(consumptionReportResponse, is(equalTo(expectedConsumptionReportResponse)));
    }

    private void createCounterConsumption(CounterConsumption counterConsumption) {
        testRestTemplate.postForObject(getBaseUrl() + "counter_callback", counterConsumption, CounterConsumption.class);
    }

    private String getBaseUrl() {
        return "http://localhost:" + serverPort + "/";
    }
}